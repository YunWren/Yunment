import{_ as a,c as t,o,af as r}from"./chunks/framework.CDCAl0iQ.js";const m=JSON.parse('{"title":"云格 关于此站的碎碎念","description":"","frontmatter":{},"headers":[],"relativePath":"brokenThoughts.md","filePath":"brokenThoughts.md"}'),s={name:"brokenThoughts.md"};function n(i,e,l,d,h,c){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="云格-关于此站的碎碎念" tabindex="-1"><strong>云格 关于此站的碎碎念</strong> <a class="header-anchor" href="#云格-关于此站的碎碎念" aria-label="Permalink to &quot;**云格 关于此站的碎碎念**&quot;">​</a></h1><hr><h3 id="关于这个网站的碎碎念" tabindex="-1">关于这个网站的碎碎念 <a class="header-anchor" href="#关于这个网站的碎碎念" aria-label="Permalink to &quot;关于这个网站的碎碎念&quot;">​</a></h3><h4 id="一、🤔-为什么要用-vitepress" tabindex="-1">一、🤔“为什么要用 VitePress？” <a class="header-anchor" href="#一、🤔-为什么要用-vitepress" aria-label="Permalink to &quot;一、🤔“为什么要用 VitePress？”&quot;">​</a></h4><p>其实一开始想用VuePress，但看到 Vue 团队在 2024 年力推 VitePress，再加上我新生入学的时候就看到了我们一个学长用此架构写的很帅的大学生活指北，在小小的我心中留下了大大的敬佩。就决定试试。它的它的启动速度确实快得离谱——修改完 Markdown 文件后，页面几乎是“瞬间”刷新，连手机都不用刷一下就能看到效果。但说实话，刚接触时被它的配置文件搞懵了：为什么主题配置要放在 <code>.vitepress/config.ts</code> 里？为什么图片引用无需加前缀文件？后来才明白，这种约定大于配置的设计，反而让项目结构更干净了。</p><h4 id="二、😨那些-差点放弃-的瞬间" tabindex="-1">二、😨那些“差点放弃”的瞬间 <a class="header-anchor" href="#二、😨那些-差点放弃-的瞬间" aria-label="Permalink to &quot;二、😨那些“差点放弃”的瞬间&quot;">​</a></h4><p>最崩溃的是部署时遇到的 MIME 类型报错。明明本地运行一切正常，一上传到服务器就提示 <code>text/html</code> 不匹配 <code>application/javascript</code>，最后发现是欣赏自己代码的时候误触了一个空格。还有一次，误删了 <code>.vitepress/dist</code> 目录，结果构建脚本直接罢工，只好老老实实重新跑了一遍 <code>npm docs:build</code>。现在想想，这些坑反而让我对静态站点的运行原理理解更深了。</p><h4 id="三、🐘关于-像-element-又不像-element" tabindex="-1">三、🐘关于“像 Element 又不像 Element” <a class="header-anchor" href="#三、🐘关于-像-element-又不像-element" aria-label="Permalink to &quot;三、🐘关于“像 Element 又不像 Element”&quot;">​</a></h4><p>这个组件库的文档站刻意模仿了 Element 的布局——左侧导航栏、顶部 Tabs 切换、代码示例的折叠展开。但暗地里偷偷改了两处：把默认的绿色换成了蓝色（更符合云歌这个名字），又在主页标题加了动态背景色渐变，还有logo展示。有时候觉得自己像个裁缝，把 VitePress 的默认主题、社区插件和自研样式缝缝补补，拼成一件勉强能穿的外套。（本来想再给网站加个背景，最后放弃了，一是觉得自己没有时间去亲自创作背景图片，我知道在ai时代坚持用自己小学生水平画画是很落后的，但是这有一种是我自己诞生的东西的成就感。二是觉得太花里胡哨了）</p><h4 id="四、🦜文档比代码难写" tabindex="-1">四、🦜文档比代码难写 <a class="header-anchor" href="#四、🦜文档比代码难写" aria-label="Permalink to &quot;四、🦜文档比代码难写&quot;">​</a></h4><p>写组件时行云流水，写到文档示例反而卡壳。比如一个按钮组件，要展示不同尺寸、状态、加载动画，就得在 Markdown 里引用许多区块，还要操心代码引用，折叠后是否影响可读性。还要猜测如果有用户读了我的文档，够不够有亲切感，够不够通俗易懂（即使这个网站是练手不会公开）</p><h3 id="🦜🦜🦜后记" tabindex="-1">🦜🦜🦜后记 <a class="header-anchor" href="#🦜🦜🦜后记" aria-label="Permalink to &quot;🦜🦜🦜后记&quot;">​</a></h3><p>搭建网站像养电子盆栽，每天浇水（更新文档）、修剪枝叶（优化性能）、偶尔换个花盆（改版布局）。虽然访问量可能永远超不过 GitHub 的 robots.txt，但每次看到 <code>localhost:5173</code> 上缓缓加载的页面，和我四处塞的鹦鹉emoji🦜🦜🦜，还是会想起《黑客与画家》里那句话：“代码写出来是给人看的，顺便给机器运行。”</p><p>（写完这段突然发现，碎碎念写的比文档快多了——果然人类的本质是跑题。）</p>',14)]))}const u=a(s,[["render",n]]);export{m as __pageData,u as default};
